name: cd

on:
  push:
    tags:
    - '*'

jobs:
  ubuntu-x86_64:
    name: Compile Linux
    strategy:
      matrix:
        os: [ubuntu-latest]
        target: [x86_64-unknown-linux-gnu]
        arch: [x86_64]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install latest rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: "1.78.0"
        target: ${{ matrix.target }}
        default: true
        override: true
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Test
      run: make test
    - name: Extract tag version from ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Build
      run: make zip
      env:
        PLATFORM: linux
        ARCH: ${{ matrix.arch }}
        BUILD_VERSION: ${{ steps.get_version.outputs.VERSION }}
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_linux_${{ matrix.arch }}.zip
        path: build/compiled/factotum_${{ steps.get_version.outputs.VERSION }}_linux_${{ matrix.arch }}.zip

  ubuntu-arm64:
    name: Compile Linux
    strategy:
      matrix:
        os: [ubuntu-latest]
        target: [aarch64-unknown-linux-gnu]
        arch: [arm64]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install latest rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: "1.78.0"
        target: ${{ matrix.target }}
        default: true
        override: true
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Test
      run: make test
    - name: Extract tag version from ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Build
      run: make zip
      env:
        PLATFORM: linux
        ARCH: ${{ matrix.arch }}
        BUILD_VERSION: ${{ steps.get_version.outputs.VERSION }}
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_linux_${{ matrix.arch }}.zip
        path: build/compiled/factotum_${{ steps.get_version.outputs.VERSION }}_linux_${{ matrix.arch }}.zip

  macos-x86_64:
    name: Compile macOS
    strategy:
      matrix:
        os: [macos-latest]
        arch: [x86_64]
        target: [x86_64-apple-darwin]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install latest rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: "1.78.0"
        target: ${{ matrix.target }}
        default: true
        override: true
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Test
      run: make test
    - name: Extract tag version from ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Build
      run: make zip
      env:
        PLATFORM: darwin
        ARCH: ${{ matrix.arch }}
        BUILD_VERSION: ${{ steps.get_version.outputs.VERSION }}
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_darwin_${{ matrix.arch }}.zip
        path: build/compiled/factotum_${{ steps.get_version.outputs.VERSION }}_darwin_${{ matrix.arch }}.zip

  macos-arm64:
    name: Compile macOS
    strategy:
      matrix:
        os: [macos-latest]
        arch: [arm64]
        target: [aarch64-apple-darwin]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install latest rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: "1.78.0"
        target: ${{ matrix.target }}
        default: true
        override: true
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Test
      run: make test
    - name: Extract tag version from ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Build
      run: make zip
      env:
        PLATFORM: darwin
        ARCH: ${{ matrix.arch }}
        BUILD_VERSION: ${{ steps.get_version.outputs.VERSION }}
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_darwin_${{ matrix.arch }}.zip
        path: build/compiled/factotum_${{ steps.get_version.outputs.VERSION }}_darwin_${{ matrix.arch }}.zip

  release:
    needs: ["ubuntu-x86_64", "ubuntu-arm64", "macos-x86_64", "macos-arm64"]

    name: Release
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Extract tag version from ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - run: mkdir -p ./build/compiled

    - uses: actions/download-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_linux_x86_64.zip
        path: build/compiled

    - uses: actions/download-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_linux_arm64.zip
        path: build/compiled

    - uses: actions/download-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_darwin_x86_64.zip
        path: build/compiled

    - uses: actions/download-artifact@v4
      with:
        name: factotum_${{ steps.get_version.outputs.VERSION }}_darwin_arm64.zip
        path: build/compiled

    - name: Upload release binaries
      uses: alexellis/upload-assets@0.4.0
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        asset_paths: '["./build/compiled/*"]'
